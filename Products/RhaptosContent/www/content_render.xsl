<?xml version="1.0"?>
<xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cnx="http://cnx.rice.edu/cnxml"
    xmlns="http://www.w3.org/1999/xhtml"
    version="1.0">

  <!-- You should install the CNXML package and catalog so this can use a local copy-->
  <xsl:import href="http://cnx.rice.edu/technology/cnxml/stylesheet/cnxml_render.xsl"/>

  <xsl:template match="cnx:ins">
    <ins><xsl:apply-templates/></ins>
  </xsl:template>
  
  <xsl:template match="cnx:del">
    <del><xsl:apply-templates/></del>
  </xsl:template>
  
  <!-- Don't actually display gallery if there are no mpegs -->
  <xsl:param name="gallery" select="0"/>
  <xsl:variable name="xsl_gallery" select="$gallery and (//cnx:media[@type='audio/mpeg'] or //cnx:audio[@mime-type='audio/mpeg'])"/>
  <xsl:param name="printstyle" select="''"/>
  <xsl:param name="customize-style" select="$printstyle"/>
  <xsl:param name="intro-module">
    <xsl:call-template name="class-test">
      <xsl:with-param name="provided-class" select="/module/cnx:document/@class"/>
      <xsl:with-param name="wanted-class">introduction</xsl:with-param>
    </xsl:call-template>
  </xsl:param>
  
  <xsl:param name="stylesheet_path" select="'/stylesheets/plone'"/>
  
  <xsl:variable name="baseurl" select="/module/display/base/@href"/>
  <xsl:variable name="collurl" select="/module/display/context/a/@href"/>
  <xsl:variable name="authoremailstring">
    <xsl:for-each select="/module/metadata/author">
      <xsl:value-of select="email"/>
      <xsl:if test="position()!=last()">,</xsl:if>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="collauthoremailstring">
    <xsl:for-each select="/module/display/context/authors/author">
      <xsl:value-of select="email"/>
      <xsl:if test="position()!=last()">,</xsl:if>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="objectId" select="/module/publishing/objectId/text()"/>
  <xsl:variable name="previous" select="/module/display/context/links/link[@rel='previous']"/>
  <xsl:variable name="next" select="/module/display/context/links/link[@rel='next']"/>
  <xsl:variable name="modlang" select="/module/metadata/language"/>
  <xsl:variable name="courseid">
    <xsl:choose>
      <xsl:when test="/module/display/context">
	<xsl:value-of select="/module/display/context/a/@id"/>
      </xsl:when>
      <xsl:otherwise>0</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="moduletitle">
    <!-- for changing module title in course context -->
    <xsl:choose>
      <xsl:when test="/module/display/context/title">
	<xsl:value-of select="/module/display/context/title"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="/module/title"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="colltitle">
    <xsl:value-of select="/module/display/context/a/text()"/>
  </xsl:variable>
  <xsl:variable name="stylesheetloc" select="substring-before(//display/styles/style[@active='true']/@href,'document.css')"/>
  <xsl:variable name="portal" select="module/publishing/portal/title"/>
  <xsl:variable name="colltitleescapedformailto">
    <xsl:call-template name="escapeformailto">
      <xsl:with-param name="string" select="$colltitle"/>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="moduletitleescapedformailto">
    <xsl:call-template name="escapeformailto">
      <xsl:with-param name="string" select="$moduletitle"/>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="favorites" select="/module/metadata/lensinfo/category[@name='Favorites']"/>
  <xsl:variable name="favoritesdirect" select="count($favorites/list/entry[not(@indirect)])"/>
  <xsl:variable name="favoritescontextual" select="count($favorites/list/entry[@indirect = 'contextual'])"/>
  <xsl:variable name="google-analytics-tracking-code" select="/module/google-analytics/@code"/>
  <xsl:variable name="social-url-escaped">
    <xsl:value-of select="/module/display/base/@href-latest-escaped"/>
    <xsl:if test="/module/display/context">
      <!-- "?collection=" -->
      <xsl:text>%3Fcollection%3D</xsl:text>
      <xsl:value-of select="/module/display/context/a/@id"/>
    </xsl:if>
  </xsl:variable>
  <xsl:variable name="social-url">
    <xsl:value-of select="/module/display/base/@href-latest"/>
    <xsl:if test="/module/display/context">
      <xsl:text>?collection=</xsl:text>
      <xsl:value-of select="/module/display/context/a/@id"/>
    </xsl:if>
  </xsl:variable>
  
  <xsl:output method="xml" omit-xml-declaration="yes" encoding="utf-8"/>
  
  <xsl:template match="/|title|name|abstract">
    <xsl:apply-templates/>
  </xsl:template>
  
  <xsl:template match="module">
    <xsl:if test="display/offline">
      <xsl:comment>
        WARNING: Do NOT edit this file. It was generated for display purposes only and will be
        ignored when imported.
        If you would like to edit this module, please use the index.cnxml file.
      </xsl:comment>
    </xsl:if>
    <html>
      
      <head>
        <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=IE7Compatible,IE=IE7"/>

        <!-- The following Open Graph (og) protocol tags are for the Facebook button so that the 
             content shows up nicely when posted to a Facebook wall.  -->
        <meta property="og:title" content="{title}"/>
        <meta property="og:type" content="article"/>
        <!-- The book icon should probably not be used for Rhaptos installs, but for now it's better 
             than nothing (or than letting Facebook randomly pick an image for you). -->
        <meta property="og:image" content="{publishing/portal/@href}/book_icon_cnx.png"/>
        <meta property="og:url" content="{$social-url}"/>
        <meta property="og:site_name" content="{publishing/portal/title}"/>
        <!-- The fb:admins content value is a special user ('Rhaptos McCrouton') made specifically 
             to populate this property, since it's required. -->
        <meta property="fb:admins" content="100002202416123" />
        <xsl:if test="publishing/portal/@isCNX='true'">
          <meta property="fb:page_id" content="81379287964" />
        </xsl:if>
        <meta property="og:description">
          <xsl:attribute name="content">
            <!-- First look for a 'summary'. If not found, then look for the first paragraph with text in it.  Otherwise leave it null.  -->
            <xsl:variable name="summarytext">
              <xsl:value-of select="normalize-space(metadata/abstract)"/>
            </xsl:variable>
            <xsl:variable name="firstparatext">
              <xsl:value-of select="normalize-space(cnx:document/cnx:content//cnx:para[normalize-space(text()) != ''][1])"/>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$summarytext != ''">
                <xsl:value-of select="$summarytext"/>
              </xsl:when>
              <xsl:when test="$firstparatext != ''">
                <xsl:value-of select="$firstparatext"/>
              </xsl:when>
            </xsl:choose>
          </xsl:attribute>
        </meta>

	<xsl:if test="publishing/state[text()='public']">
	  <base href="{$baseurl}"/>
	</xsl:if>
	
	<title>
          <xsl:value-of select="$moduletitle"/>
	</title>

        <link rel="stylesheet" type="text/css" href="{publishing/portal/@href}/extjs/resources/css/ext-all.css"/>

        <xsl:if test="display/offline">
        <link rel="stylesheet" type="text/css" href="{publishing/portal/@href}/stylesheets/offline.css"/>
        </xsl:if>

	<xsl:choose>
	  <xsl:when test="display/styles[not(@chooser='true')]">
	    <link type="text/css" href="{display/styles/style[@active='true']/@href}" media="screen" title="{display/styles/style[@active='true']/@id}" rel="stylesheet"/>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:for-each select="display/styles/style">
	      <link type="text/css" href="{@href}" media="screen" title="{@id}">
		<xsl:attribute name="rel">
		  <xsl:choose>
		    <xsl:when test="@active='true'">stylesheet</xsl:when>
		    <xsl:otherwise>alternate stylesheet</xsl:otherwise>
		  </xsl:choose>
		</xsl:attribute>
	      </link>
	    </xsl:for-each>
	  </xsl:otherwise>
	</xsl:choose>
	<link rel="stylesheet" type="text/css" href="{$stylesheet_path}/print.css" media="print"/>
	<xsl:if test="$xsl_gallery">
	  <link rel="stylesheet" type="text/css" href="{$stylesheet_path}/gallery.css" media="screen"/>
	</xsl:if>
	<xsl:if test="$customize-style != ''">
	  <link rel="stylesheet" type="text/css" href="{$stylesheet_path}/modern-textbook.css" media="screen"/>
	</xsl:if>

    <script type="text/javascript" src="{publishing/portal/@href}/rhaptosutils.js"><xsl:text> </xsl:text></script>
    <script type="text/javascript" src="{publishing/portal/@href}/js/toggler.js"><xsl:text> </xsl:text></script>
    <script type="text/javascript" src="{publishing/portal/@href}/js/exercise.js"><xsl:text> </xsl:text></script>
    <script type="text/javascript" src="{publishing/portal/@href}/js/qml_1-0.js"><xsl:text> </xsl:text></script>

    <script type="text/javascript" src="{publishing/portal/@href}/extjs/ext.js"><xsl:text> </xsl:text></script>
    <script type="text/javascript" src="{publishing/portal/@href}/extjs/adapter/jquery/jquery.js"><xsl:text> </xsl:text></script>
    <script type="text/javascript" src="{publishing/portal/@href}/extjs/adapter/jquery/jquery-plugins.js"><xsl:text> </xsl:text></script>

   <script type="text/javascript" src="{publishing/portal/@href}/lightweight-branding-banner.js"><xsl:text> </xsl:text></script>

    <script type="text/javascript" src="{publishing/portal/@href}/js/dynamic.js"><xsl:text> </xsl:text></script>
    <script type="text/javascript">var portal_url="<xsl:value-of select="publishing/portal/@href"/>";</script>

        <xsl:if test="display/context">
            <script type="text/javascript" src="{publishing/portal/@href}/transmenus/transMenus0_9_2.js"><xsl:text> </xsl:text></script>
            <script type="text/javascript" src="{publishing/portal/@href}/transmenus/toc.js"><xsl:text> </xsl:text></script>
        </xsl:if>

        <!-- login.js only needed when opening lens dialog when anonymous. dynamic load
             would be nice, if someone can figure out how. See lens_add near portlet_log macro -->
             <script type="text/javascript" src="{publishing/portal/@href}/register_function.js"><xsl:text> </xsl:text></script>
             <script type="text/javascript" src="{publishing/portal/@href}/login.js"><xsl:text> </xsl:text></script>

	<xsl:variable name="version" select="publishing/version/text()"/>
    <link rel="source" title="Source" type="text/xml" href="{publishing/portal/@href}/content/{$objectId}/{$version}/source"/>
    <link rel="module" title="Module" type="text/xml" href="{publishing/portal/@href}/content/{$objectId}/latest/"/>
	
	<xsl:if test="$previous">
	  <link rel="previous" href="{$previous/@href}" title="{$previous/@title}"/>
	</xsl:if>
	<xsl:if test="$next">
	  <link rel="next" href="{$next/@href}" title="{$next/@title}"/>
	</xsl:if>
	<xsl:if test="display/context/a">
	  <link rel="up" href="{$collurl}" title="{$colltitle}"/>
	</xsl:if>
	<link rel="meta" type="application/rdf+xml" href="content_license"/>
	<xsl:for-each select="//link[contains(@rel,'annotea')]">
	  <link>
	    <xsl:copy-of select="@*"/>
	  </link>
	</xsl:for-each>
	
        <link rel="search" title="Search this site" href="{publishing/portal/@href}/content/search"/>
        <link rel="search" title="{publishing/portal/title}" href="{publishing/portal/@href}/opensearchdescription" type="application/opensearchdescription+xml"/>

        <script type="text/javascript" src="{publishing/portal/@href}/++resource++mathjax/MathJax.js">
            MathJax.Hub.Config({
                extensions: ["mml2jax-bugfix.js"],
                menuSettings: {zoom:"Click"},
                "HTML-CSS": {scale:110},
                jax: ["input/MathML","output/HTML-CSS"]
            });
            if(location.href.split("#").length != 1) {
              MathJax.Hub.Register.StartupHook("End", function() {location.href = location.href; });
            }
        </script>

      </head>
      
      <body onload="constructHintCounter(); togglerInitialSettings();" id="cnx_module">
        <xsl:if test="$intro-module='1' and $customize-style != ''">
          <xsl:attribute name="class">introduction</xsl:attribute>
        </xsl:if>

      <xsl:if test="display/offline">
        <p id="nostyles" style="color: red; border: medium red solid; padding:0.5em; margin:0.5em;">
          Oops! You're viewing this page without styles. This can happen if you're viewing this
          from directly inside a zip file. Please extract the contents of the zip file and view
          from there.
        </p>
      </xsl:if>

	<xsl:if test="$xsl_gallery">
	  <div id="cnx_whole_enchilada">
	    <xsl:call-template name="ingredients"/>
	  </div>
	</xsl:if>
	<xsl:if test="not($xsl_gallery)">
	  <xsl:call-template name="ingredients"/>
	</xsl:if>
	
	
	<!-- LISTENING GALLERY -->
	<xsl:if test="$xsl_gallery">
	  <div id="musical-examples">
	    <span class="name">
	      <xsl:text>Musical Examples</xsl:text>
	    </span>
	    <ol>
	      <xsl:for-each select="//cnx:media[@type='audio/mpeg']">
		<li>
		  <a class="musical-example" id="{@id}-link" href="javascript:toggleBar('{@id}')">
		    <xsl:call-template name="composer-title-comments"/>
		  </a>
		</li>
	      </xsl:for-each>
              <xsl:for-each select="//cnx:audio[@mime-type='audio/mpeg']">
                <xsl:variable name="id" select="parent::cnx:media/@id"/>
                <li>
                  <a class="musical-example" id="{$id}-link" href="javascript:toggleBar('{$id}')">
                    <xsl:call-template name="composer-title-comments"/>
                  </a>
                </li>
              </xsl:for-each>
	    </ol>
	  </div>
	  
	  <!-- MUSIC APPLET TITLE BARS -->
	  <xsl:for-each select="//cnx:media[@type='audio/mpeg']|//cnx:audio[@mime-type='audio/mpeg']">
            <xsl:variable name="id">
              <xsl:choose>
                <xsl:when test="self::cnx:media">
                  <xsl:value-of select="@id"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="parent::cnx:media/@id"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
	    <div id="{$id}">
	      <xsl:attribute name="class">
		<xsl:choose>
		  <xsl:when test="cnx:param[@name='interactive']">title-bar interactive</xsl:when>
		  <xsl:otherwise>title-bar</xsl:otherwise>
		</xsl:choose>
	      </xsl:attribute>
	      <div class="titles">
		<div class="title shadow">                  
		  <xsl:call-template name="composer-title-comments"/>
		  <xsl:call-template name="tt"/>
		</div>
		<div class="title top">
		  <xsl:call-template name="composer-title-comments"/>
		  <xsl:call-template name="tt"/>
		</div>
		<a class="close" href="javascript:toggleBar('{$id}');">x</a>
	      </div>
	      <div class="player">
		<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" width="600" align="center">
		  <xsl:choose>
		    <xsl:when test="cnx:param[@name='interactive']">
		      <xsl:attribute name="height">175</xsl:attribute>
		      <param name="movie" value="http://music.cnx.rice.edu/flash/cnxplayer_int.swf?song={@src}&amp;songname={cnx:param[@name='interactive']/@value}"/>
		    </xsl:when>
		    <xsl:when test="cnx:param[@name='timed-text']">
		      <xsl:attribute name="height">85</xsl:attribute>
		      <param name="movie" value="http://music.cnx.rice.edu/flash/cnxplayer_tt.swf?song={@src}&amp;songname={cnx:param[@name='timed-text']/@value}"/>
		    </xsl:when>
		    <xsl:otherwise>
		      <xsl:attribute name="height">60</xsl:attribute>
		      <param name="movie" value="http://music.cnx.rice.edu/flash/cnxplayer.swf?song={@src}"/>
		    </xsl:otherwise>
		  </xsl:choose>
		  
		  <param name="quality" value="high"/>
		  <embed width="600" align="center" quality="high" bgcolor="4A79A5" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">
		    <xsl:choose>
		      <xsl:when test="cnx:param[@name='interactive']">
			<xsl:attribute name="height">175</xsl:attribute>
			<xsl:attribute name="src">http://music.cnx.rice.edu/flash/cnxplayer_int.swf?song=<xsl:value-of select="@src"/>&amp;songname=<xsl:value-of select="cnx:param[@name='interactive']/@value"/></xsl:attribute>
		      </xsl:when>
		      <xsl:when test="cnx:param[@name='timed-text']">
			<xsl:attribute name="height">85</xsl:attribute>
			<xsl:attribute name="src">http://music.cnx.rice.edu/flash/cnxplayer_tt.swf?song=<xsl:value-of select="@src"/>&amp;songname=<xsl:value-of select="cnx:param[@name='timed-text']/@value"/></xsl:attribute>
		      </xsl:when>
		      <xsl:otherwise>
			<xsl:attribute name="height">60</xsl:attribute>
			<xsl:attribute name="src">http://music.cnx.rice.edu/flash/cnxplayer.swf?song=<xsl:value-of select="@src"/></xsl:attribute>
		      </xsl:otherwise>
		    </xsl:choose>
		    <p>You need to install <a href="http://www.macromedia.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&amp;application/x-shockwave-flash"> Macromedia Flash</a> to display this.</p>
		  </embed>
		  
		  <param name="bgcolor" value="4A79A5"/>
		  <xsl:if test="cnx:param[@name='total-time']">
		    <xsl:variable name="total-time" select="cnx:param[@name='total-time']/@value"/>
		    <param name="total-time" value="{$total-time}"/>
		  </xsl:if>
		  <param name="textcolor" value="ffffff"/>
		  <xsl:if test="cnx:param[@name='timed-text']">
		    <xsl:variable name="timed-text-file" select="cnx:param[@name='timed-text']/@value"/>
		    <param name="timed-text" value="{$timed-text-file}"/>
		  </xsl:if>
		  <xsl:if test="cnx:param[@name='interactive']">
		    <param name="interactive" value="{cnx:param[@name='interactive']/@value}"/>
		  </xsl:if>
		  
		  <!--<p>You need to install Macromedia Flash to display this.</p>-->
		  
		</object>
	      </div>
	      <div class="performance">
		<xsl:if test="cnx:param[@name='label-number' and normalize-space(@value)!='']">
		  <xsl:value-of select="cnx:param[@name='label-number']/@value"/>
		</xsl:if>
		<xsl:if test="cnx:param[@name='label-number' and normalize-space(@value)!=''] and cnx:param[@name='performer' and normalize-space(@value)!='']">
		  <xsl:text> </xsl:text>&#8212;<xsl:text> </xsl:text>
		</xsl:if>
		<xsl:if test="cnx:param[@name='performer']">
		  <xsl:value-of select="cnx:param[@name='performer']/@value"/>
		</xsl:if>
	      </div>
	    </div>
	  </xsl:for-each>

	</xsl:if>


        <div id="cnx_lens_popup" class="cnx_popup" style="display:none">
          <div class="x-dlg-hd">Add to a lens</div>
          <div class="x-dlg-bd" id="cnx_lens_inner">
            Add this content to my lens:
          </div>
        </div>

        <div id="cnx_reuse_edit_popup" class="cnx_popup" style="display:none">
          <div class="x-dlg-hd">Reuse / Edit</div>
          <div class="x-dlg-bd" id="cnx_reuse_edit_inner">
            Reuse / edit:
          </div>
        </div>

        <div id="cnx_login_dlg" class="cnx_popup" style="display:none">
          <div class="x-dlg-hd">Login Required</div>
          <div class="x-dlg-bd" id="cnx_login_inner">
            Login required for this feature
          </div>
        </div>

        <script src="http://www.google-analytics.com/ga.js" type="text/javascript"><xsl:text> </xsl:text></script>
        <script type="text/javascript">
	      	var _gaq = _gaq || [];
	        function trackthisGoogleAnalytics(strCode) {
	          try {
	            _gaq.push(['user._setAccount', strCode]);
	            _gaq.push(['user._trackPageview']);
	          }
	          catch(err) {}
	        }
        </script>

      <xsl:if test="publishing/portal/@isCNX='true'">
        <!-- CNX Google Analytics tracking for Collaborative Statistics course. -->
        <xsl:if test="$courseid = 'col10522'">
          <script type="text/javascript">
			var _gaq = _gaq || [];
			_gaq.push(['collabstats._setAccount', 'UA-5153795-1']);
			_gaq.push(['collabstats._initData']);
			_gaq.push(['collabstats._setCookiePath', '/content/']);
			_gaq.push(['collabstats._trackPageview']);
          </script>
	      <xsl:if test="display/context">
	      	<script type="text/javascript">
	      		_gaq.push(['_trackPageview', window.location.pathname+'?event=module:view:in-collection']);
	      	</script>
	      </xsl:if>
        </xsl:if>
        <!-- CNX Google Analytics tracking for the William and Flora Hewlett Foundation. -->
        <script type="text/javascript">
			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-7903479-1']);
			_gaq.push(['_setDomainName', '.cnx.org']);
			_gaq.push(['_trackPageview']);
			_gaq.push(['hewlett._setAccount', 'UA-5033010-1']);
			_gaq.push(['hewlett._setDomainName', '.cnx.org']);
			_gaq.push(['hewlett._trackPageview']);
        </script>
      </xsl:if>

        <!-- User supplied Google Analytics tracking. -->
        <xsl:if test="$google-analytics-tracking-code">
          <script type="text/javascript" id="user-google-analytics">
            <xsl:attribute name="user">
                <xsl:value-of select ="$google-analytics-tracking-code" />
            </xsl:attribute> 
            var thisElement;
            var codeGoogleAnalytics;
            thisElement = document.getElementById("user-google-analytics");
            if ( thisElement ) {
              strGoogleAnalyticsTrackingCode = thisElement.getAttribute('user');
              if ( strGoogleAnalyticsTrackingCode ) {
                trackthisGoogleAnalytics(strGoogleAnalyticsTrackingCode);
              }
            }
          </script>
        </xsl:if>

      </body>

      <xsl:if test="$xsl_gallery">
          <script type="text/javascript" src="{publishing/portal/@href}/js/music.js"><xsl:text> </xsl:text></script>
      </xsl:if>

    </html>
    
  </xsl:template>
  

  <xsl:param name="courselinks" select="/module/display/context/links/link[@rel='example' or @rel='supplemental' or @rel='prerequisite']"/>
  <xsl:param name="authorlinks" select="/module/related/links/link[@rel='example' or @rel='supplemental' or @rel='prerequisite']"/>
  
  <xsl:key name="courselinkstype" match="/module/display/context/links/link[@rel='example' or @rel='supplemental' or @rel='prerequisite']" use="@rel"/>
  <xsl:key name="authorlinkstype" match="/module/related/links/link[@rel='example' or @rel='supplemental' or @rel='prerequisite']" use="@rel"/>
  <xsl:key name="optionalroles" match="module/metadata/optionalrole" use="@name"/>
  

  <xsl:template name="ingredients">
	<xsl:variable name="portalPath" select="publishing/portal/@href"/>

    <div id="cnx_portal-top">
      <p class="hiddenStructure">
        <a href="#cnx_content_title">
          <!-- Skip to content -->
          <xsl:text>Skip to content</xsl:text>
        </a> 
        <a href="#cnx_sidebar_column">
          <!-- Skip to navigation -->
          <xsl:text>Skip to navigation</xsl:text>
        </a>
        <xsl:if test="display/context">
          <a href="#cnx_course_header">
            <!-- Skip to collection information -->
            <xsl:text>Skip to collection information</xsl:text>
          </a>
        </xsl:if>
      </p>
      <ul id="cnx_portal-siteactions">
        <xsl:if test="editing/anonymoususer">
          <li class="first">
              <a href="{publishing/portal/@href}/login_form"> <!-- Log In -->
              <xsl:text>Log In</xsl:text>
            </a>
          </li>
        </xsl:if>
        <xsl:if test="not(editing/anonymoususer)">
          <li class="first">
            <a href="{publishing/portal/@href}/logout"> <!-- Log Out -->
              <xsl:text>Log Out</xsl:text>
            </a>
          </li>
        </xsl:if>
	<li>
          <xsl:if test="publishing/portal/@isCNX='true'">
	    <a href="{publishing/portal/@href}/aboutus/contact"> <!-- Contact Us -->
	      <xsl:text>Contact Us</xsl:text>
	    </a>
        </xsl:if>
        <xsl:if test="not(publishing/portal/@isCNX='true')">
	    <a href="{publishing/portal/@href}/contact-info"> <!-- Contact Us -->
	      <xsl:text>Contact Us</xsl:text>
	    </a>
        </xsl:if>
	</li>
        <xsl:if test="/module/bugreport">
	  <li>
            <a>
              <xsl:attribute name="href">
                <xsl:value-of select ="/module/bugreport/@url" />
              </xsl:attribute>
              <xsl:value-of select ="/module/bugreport/@title" />
            </a>
	  </li>
        </xsl:if>
        <xsl:if test="publishing/portal/@isCNX='true'">
          <li>
            <a href="{publishing/portal/@href}/aboutus/cnx_donate">
                <img src="{publishing/portal/@href}/cnx-donate-button.png" alt="donate button" style="vertical-align: middle;"/>
            </a>
          </li>
        </xsl:if>
      </ul>
      <div id="cnx_portal-searchbox">
	<form name="content_search" action="{publishing/portal/@href}/content/search">
          <input name="target" type="hidden"/>
          <label for="cnx_searchGadget" class="hiddenStructure">
            <xsl:text>Search: </xsl:text>
          </label>
	  <input id="cnx_searchGadget" name="words" type="text" size="20" accesskey="s" tabindex="1"/>
          <input name="allterms" value="weakAND" type="hidden"/>
	  <input class="searchButton" type="submit" accesskey="s" tabindex="2" name="search">
	    <xsl:attribute name="value">
	      <xsl:text>Search</xsl:text>
	    </xsl:attribute>
	  </input>
	</form>
      </div>
      <h1 id="cnx_portal-logo">
	<a href="{publishing/portal/@href}" title="{publishing/portal/title}">
	  <xsl:value-of select="publishing/portal/title"/>
	</a>
      </h1>
      <div id="cnx_portal-globalnav">
      <ul>
	<li>
        <a href="{publishing/portal/@href}">
	    <xsl:text>Home</xsl:text>
	  </a>
	</li>
	<li class="selected">
          <span class="hiddenStructure"> <!-- Selected: -->
            <xsl:text>Selected:</xsl:text>
          </span>
          <a href="{publishing/portal/@href}/content/"> <!-- Content -->
	    <xsl:text>Content</xsl:text>
	  </a>
	</li>
        <li>
            <a href="{publishing/portal/@href}/lenses/"> <!-- Lenses -->
            <xsl:text>Lenses</xsl:text>
	  </a>
	</li>
	<li>
        <a href="{publishing/portal/@href}/aboutus/"> <!-- About Us -->
	    <xsl:text>About Us</xsl:text>
	  </a>
	</li>
	<li>
        <a href="{publishing/portal/@href}/help/"> <!-- Help -->
	    <xsl:text>Help</xsl:text>
	  </a>
	</li>
	<li>
        <a href="{publishing/portal/@href}/mydashboard"> <!-- MyCNX -->
        <xsl:if test="publishing/portal/@isCNX='true'">
	    <xsl:text>MyCNX</xsl:text>
        </xsl:if>
        <xsl:if test="not(publishing/portal/@isCNX='true')">
	    <xsl:text>MyRhaptos</xsl:text>
        </xsl:if>
	  </a>
	</li>
      </ul>
      </div>
      <div id="cnx_portal-breadcrumbs">
	<!-- You are here: -->
	<xsl:text>You are here: </xsl:text>
    <a href="{publishing/portal/@href}">Home</a>
	<!-- &#187; -->
	<xsl:text> &#187; </xsl:text>
    <a href="{publishing/portal/@href}/content/"> <!-- Content -->
	  <xsl:text>Content</xsl:text>
	</a>
	<!-- &#187; -->
	<xsl:text> &#187; </xsl:text>
	<xsl:if test="display/context">
	  <a href="{$collurl}">
	    <xsl:value-of select="$colltitle"/>
	  </a>
	  <!-- &#187; -->
	  <xsl:text> &#187; </xsl:text>
	</xsl:if>
        <xsl:value-of select="$moduletitle"/>
      </div>

    </div>

    <xsl:apply-templates select='/module/display/branding'/>

    <div id="cnx_columns">

      <div id="cnx_sidebar_column">
      <xsl:apply-templates select="/module/display/branding/@logo"/>
        <h2 class="hiddenStructure">
          <!-- Navigation -->
          <xsl:text>Navigation</xsl:text>
        </h2>

        <xsl:if test="display/context">
          <div class="portletContainer" id="cnx_course_navigation">
            <dl class="portlet">
              <dt class="portletHeader">
                <span class="portletTopLeft"><xsl:text> </xsl:text></span>
                <span>
                  <h3>
                    <a href="#cnx_course_navigation_contents" onclick="twist_toggle('cnx_course_navigation'); return false;">
                      <xsl:attribute name="title">
                        <!-- Click to toggle the Table of Contents open and closed -->
                        <xsl:text>Click to toggle the Table of Contents open and closed</xsl:text>
                      </xsl:attribute>
                      <!-- Table of -->
                      <xsl:text>Table of</xsl:text>
                      <xsl:text> </xsl:text>
                      <span style="white-space: nowrap;">
                      <!-- Contents -->
                      <xsl:text>Contents</xsl:text>
                      <xsl:text> </xsl:text>
                      <img src="{concat($stylesheetloc,'arrow-open.png')}" id="cnx_course_navigation_collapse" alt="">
                        <xsl:attribute name="style">
                          <xsl:choose>
                            <xsl:when test="display/twisties/navigationcollapsed = 'false'">display: inline;</xsl:when>
                            <xsl:otherwise>display: none;</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                      </img>
                      <img src="{concat($stylesheetloc,'arrow-closed.png')}" id="cnx_course_navigation_expand" alt="">
                        <xsl:attribute name="style">
                          <xsl:choose>
                            <xsl:when test="display/twisties/navigationcollapsed = 'true'">display: inline;</xsl:when>
                            <xsl:otherwise>display: none;</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                      </img>
                      </span>
                    </a>
                  </h3>
                </span>
                <span class="portletTopRight"><xsl:text> </xsl:text></span>
              </dt>
              <dd class="portletItem odd">
                <div id="cnx_course_navigation_contents">
                  <xsl:if test="display/twisties/navigationcollapsed = 'true'">
                    <xsl:attribute name="style">display: none;</xsl:attribute>
                  </xsl:if>
                  <div id="course" path="/content">
                    <xsl:apply-templates select="display/context/navigation/*[not(self::collapsed)]|display/context/navigation/@*"/>
                  </div>
                </div>
              </dd>
            </dl>
          </div>
        </xsl:if>

        <xsl:if test="approve_module_lenses/has_lenses[text()='1']">
          <div class="portletContainer" id="cnx_endorse_module">
            <dl class="portlet">
              <dt class="portletHeader">
                <span class="portletTopLeft"><xsl:text> </xsl:text></span>
                <span><h3>
                  <xsl:text>Approve Module</xsl:text>
                </h3></span>
                <span class="portletTopRight"><xsl:text> </xsl:text></span>
              </dt>
              <dd class="portletItem odd">
                <h4>Select the lenses where this module should be approved:</h4>
                <xsl:variable name="approve_form_action" select="/module/approve_module_lenses/@form_action" />
                <form method="post" action="{$approve_form_action}">
                  <ul>
                  <xsl:for-each select="/module/approve_module_lenses/lenses/lens">
                    <li>
                    <input name="paths:list"
                           value="{@path}"
                           type="checkbox"
                           class="noborder" />
                       <a href="{@link}">
                         <xsl:value-of select="title" />
                       </a>
                    </li>
                  </xsl:for-each>
                  </ul>
                  <input class="searchButton" type="submit" value="Approve" />
                </form>
              </dd>
            </dl>
          </div>
        </xsl:if>



        <xsl:if test="metadata/lensinfo/category">
          <xsl:variable name="endorsements" select="metadata/lensinfo/category[@name='Endorsement']"/>
          <xsl:variable name="affiliations" select="metadata/lensinfo/category[@name='Affiliation']"/>
          <xsl:variable name="memberlists" select="metadata/lensinfo/category[@quality='' and @name!='Favorites']"/>
          <div class="portletContainer" id="cnx_lens_info">
            <dl class="portlet">
              <dt class="portletHeader">
                <span class="portletTopLeft"><xsl:text> </xsl:text></span>
                <!-- Lenses -->
                <span><h3>
                  <xsl:text>Lenses</xsl:text>
                </h3></span>
                <span class="portletTopRight"><xsl:text> </xsl:text></span>
              </dt>
              <dd class="portletItem odd">
                <div class="lensinfowrap">
                  <!-- What is a lens? -->
                  <p id="cnx_what_is_a_lens">
                    <a href="{publishing/portal/@href}/help/viewing/lenses" class="lenslink">
                      <xsl:text>What is a lens</xsl:text>
                      <xsl:text>?</xsl:text>
                    </a>
                  </p>
                  <xsl:call-template name="lenshelp"/>
                </div>
                <!-- This content is ... -->
                <h4 id="cnx_this_content_is_ellipsis">
                  <xsl:text>This content is ...</xsl:text>
                </h4>
                <xsl:if test="$endorsements">
                  <div class="lensinfowrap">
                    <!-- Endorsed by -->
                    <h4>
                      <xsl:text>Endorsed by</xsl:text>
                      <xsl:text> </xsl:text>
                      <!-- Tick Mark -->
                      <img src="/endorsed.gif" alt="Endorsed" />
                      <xsl:text> </xsl:text>
                      <!-- ([What does "Endorsed by" mean]?) -->
                      <a href="{publishing/portal/@href}/help/glossary#endorsement" class="lenslink">
                        <xsl:text>(</xsl:text>
                        <span class="hiddenStructure">
                          <xsl:text>What does "Endorsed by" mean</xsl:text>
                        </span>
                        <xsl:text>?</xsl:text>
                        <xsl:text>)</xsl:text>
                      </a>
                    </h4>
                    <span class="lensinfo hiddenStructure">
                      <!-- This content has been endorsed by the 
                           organizations listed. Click each link for a 
                           list of all content endorsed by the 
                           organization. -->
                      <xsl:text>This content has been endorsed by the organizations listed. Click each link for a list of all content endorsed by the organization.</xsl:text>
                    </span>
                  </div>
                  <ul id="cnx_endorsements_expanded">
                    <xsl:for-each select="$endorsements/list">
                      <xsl:call-template name="lens"/>
                    </xsl:for-each>
                  </ul>
                </xsl:if>
                <xsl:if test="$affiliations">
                  <div class="lensinfowrap">
                    <!-- Affiliated with -->
                    <h4>
                      <xsl:text>Affiliated with</xsl:text>
                      <xsl:text> </xsl:text>
                      <!-- ([What does "Affiliated with" mean]?) -->
                      <a href="{publishing/portal/@href}/help/glossary#affiliation" class="lenslink">
                        <xsl:text>(</xsl:text>
                        <span class="hiddenStructure">
                          <xsl:text>What does "Affiliated with" mean</xsl:text>
                        </span>
                        <xsl:text>?</xsl:text>
                        <xsl:text>)</xsl:text>
                      </a>
                    </h4>
                    <span class="lensinfo hiddenStructure">
                      <!-- This content is either by members of the 
                           organizations listed or about topics related 
                           to the organizations listed. Click each link 
                           to see a list of all content affiliated with 
                           the organization. --> 
                      <xsl:text>This content is either by members of the organizations listed or about topics related to the organizations listed. Click each link to see a list of all content affiliated with the organization.</xsl:text>
                    </span>
                  </div>
                  <ul id="cnx_affiliations_expanded">
                    <xsl:for-each select="$affiliations/list">
                      <xsl:call-template name="lens"/>
                    </xsl:for-each>
                  </ul>
                </xsl:if>
                <xsl:if test="$memberlists or $favorites">
                  <h4>
                    <!-- (Also) In these lenses -->
                    <xsl:choose>
                      <xsl:when test="$endorsements or $affiliations">
                        <xsl:text>Also in these lenses</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>In these lenses</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </h4>
                  <ul id="cnx_otherlenscats_expanded">
                    <xsl:for-each select="$favorites/list">
                      <xsl:call-template name="lens"/>
                    </xsl:for-each>
                    <xsl:for-each select="$memberlists/list">
                      <xsl:call-template name="lens"/>
                    </xsl:for-each>
                  </ul>
                </xsl:if>
              </dd>
            </dl>
          </div>
        </xsl:if>

	<xsl:if test="related/similar/* or (related/courses/* and count(related/courses/a[@id != $courseid]) &gt; 0)">
          <div class="portletContainer" id="cnx_related_material">
            <dl class="portlet">
              <dt class="portletHeader">
                <span class="portletTopLeft"><xsl:text> </xsl:text></span>
                <!-- Related material -->
                <span><h3>
                  <xsl:text>Related material</xsl:text>
                </h3></span>
                <span class="portletTopRight"><xsl:text> </xsl:text></span>
              </dt>
              <xsl:if test="related/similar/*">
                <dd class="portletItem odd">
                  <h4><!-- Similar content -->
                    <xsl:text>Similar content</xsl:text>
                  </h4>
                  <ul>
                    <xsl:for-each select="related/similar/a">
                      <li>
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="@type='Module'">cnx_module</xsl:when>
                            <xsl:otherwise>cnx_collection</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <a href="{@href}">
                          <xsl:apply-templates/>
                        </a>
                      </li>
                    </xsl:for-each>
                    <xsl:if test="related/similar/@more='true'">
                      <li class="portletMore">
                        <a href="{publishing/portal/@href}/content/similarity?objectId={$objectId}">
                          <xsl:attribute name="title"><!-- More links to similar content -->
                            <xsl:text>More links to similar content</xsl:text>
                          </xsl:attribute>
                          <!-- More -->
                          <xsl:text>More</xsl:text>
                          <span class="hiddenStructure">
                            <xsl:text> </xsl:text>
                            <!-- similar content -->
                            <xsl:text>similar content</xsl:text>
                          </span>
                          <xsl:text> </xsl:text>
                          &#187;
                        </a>
                      </li>
                    </xsl:if>
                  </ul>
                </dd>
              </xsl:if>

              <xsl:if test="related/courses/* and count(related/courses/a[@id != $courseid]) &gt; 0">
                <dd>
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="related/similar/*">portletItem even</xsl:when>
                      <xsl:otherwise>portletItem odd</xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <h4><!-- (Other) Collections using this module -->
                    <xsl:choose>
                      <xsl:when test="$courseid != '0'">
                        <xsl:text>Other collections using this module</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>Collections using this module</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </h4>
                  <ul>
                    <xsl:for-each select="related/courses/a[@id != $courseid]">
                      <li class="cnx_collection">
                        <a href="{@href}">
                          <xsl:apply-templates/>
                        </a>
                      </li>
                    </xsl:for-each>
                    <xsl:if test="related/courses/@more='true'">
                      <li class="portletMore">
                        <a href="{publishing/portal/@href}/content/search?portal_types:list=Collection&amp;words={$objectId}">
                          <xsl:attribute name="title"><!-- More collections using this module -->
                            <xsl:text>More collections using this module</xsl:text>
                          </xsl:attribute>
                          <!-- More -->
                          <xsl:text>More</xsl:text>&#160;&#187;
                        </a>
                      </li>
                    </xsl:if>
                  </ul>
                </dd>
              </xsl:if>

            </dl>
          </div>
        </xsl:if>

        <div class="portletContainer" id="cnx_recent_viewed">
          <dl class="portlet">
            <dt class="portletHeader">
              <span class="portletTopLeft"><xsl:text> </xsl:text></span>
              <span>
                <!-- Recently Viewed -->
                <h3>
                  <a href="#cnx_recentview_contents" id="cnx_recentview_header"
                     onclick="twist_toggle('cnx_recentview'); return false;">
                    <!-- Recently -->
                    <xsl:text>Recently</xsl:text>
                    <xsl:text> </xsl:text>
                    <span style="white-space: nowrap;">
                      <!-- Viewed -->
                      <xsl:text>Viewed</xsl:text>
                      <xsl:text> </xsl:text>
                      <img src="{concat($stylesheetloc,'arrow-open.png')}" id="cnx_recentview_collapse" alt="">
                        <xsl:attribute name="style">
                          <xsl:choose>
                            <xsl:when test="display/twisties/recentcollapsed = 'false'">display: inline;</xsl:when>
                            <xsl:otherwise>display: none;</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                      </img>
                      <img src="{concat($stylesheetloc,'arrow-closed.png')}" id="cnx_recentview_expand" alt="">
                        <xsl:attribute name="style">
                          <xsl:choose>
                            <xsl:when test="display/twisties/recentcollapsed = 'true'">display: inline;</xsl:when>
                            <xsl:otherwise>display: none;</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                      </img>
                    </span>
                  </a>
                </h3>
              </span>
              <span class="portletTopRight"><xsl:text> </xsl:text></span>
            </dt>
            <dd class="portletItem odd">
              <div id="cnx_recentview_contents">This feature requires Javascript to be enabled.</div>
            </dd>
          </dl>
        </div>

        <xsl:if test="metadata/lensinfo/tags or metadata/lensinfo//tag_namespaces">
          <div class="portletContainer" id="cnx_tags">
            <dl class="portlet">
              <dt class="portletHeader">
                <span class="portletTopLeft"><xsl:text> </xsl:text></span>
                <!-- Tags -->
                <span><h3>
                  <xsl:text>Tags</xsl:text>
                </h3></span>
                <span class="portletTopRight"><xsl:text> </xsl:text></span>
              </dt>
              <dd class="portletItem odd">
                <div class="lensinfowrap">
                  <p class="cnx_question_mark">
                    <a href="{publishing/portal/@href}/help/glossary#tags" class="lenslink">
                      <!-- ([What is a tag]?) -->
                      <xsl:text>(</xsl:text>
                      <span class="hiddenStructure">
                        <xsl:text>What is a tag</xsl:text>
                      </span>
                      <xsl:text>?</xsl:text>
                      <xsl:text>)</xsl:text>
                    </a>
                  </p>
                  <span class="lensinfo hiddenStructure">
                    <!-- These tags about this content come from
                    endorsements, affiliations, and member lists
                    that include this content. -->
                    <xsl:text>These tags come from the endorsement, affiliation, and other lenses that include this content.</xsl:text>
                  </span>
                </div>
              
                <ul class="cnx_tag_listing">
                  <xsl:for-each select="metadata/lensinfo/tags/tag">
                    <li>
                      <a href="{$portalPath}/lenses/tags_browse?tag={.}" title="{.}">
                        <xsl:value-of select="."/>
                      </a>
                    </li>
                    <xsl:text> </xsl:text>
                  </xsl:for-each>                  

                  <xsl:for-each select="metadata/lensinfo//tag_namespaces/tags[not(.=preceding::entry/tag_namespaces/tags)]/tag">
                    <li>
                      <a href="{$portalPath}/lenses/tags_browse?prefix={../../prefix}&amp;tag={term}" title="{title}">
                        <xsl:value-of select="term"/>
                      </a>
                    </li>
                    <xsl:text> </xsl:text>
                  </xsl:for-each>

                </ul>
              </dd>
            </dl>
          </div>
        </xsl:if>

        <!-- Force a space so that if the sidebar is empty (usually only 
             in the case of a new module on preview), IE doesn't 
             interpret the sidebar div to be remaining open and thus 
             mess up the styling of anything following it. -->
        <xsl:text> </xsl:text>

      </div>


      <div id="cnx_content_column">
        <xsl:apply-templates select="structure/contentactionstop/*|structure/contentactionstop/@*"/>

	<xsl:if test="display/context">
	  <div id="cnx_course_header">

            <xsl:if test="display/context/orderable">
              <a id="cnx_order_link" href="{display/context/orderable/@url}" target="_blank">
              	<xsl:if test="publishing/portal/@isCNX='true'">
              		<xsl:attribute name="onmousedown">try{var t=_gat._getTracker('UA-7903479-1'); t._initData(); t._setDomainName('.cnx.org'); t._trackPageview(window.location.pathname+'?event=collection:order');}catch(err){}</xsl:attribute>
              	</xsl:if>
                Order printed collection
              </a>
            </xsl:if>

            <img src="/book_icon_cnx.png" alt="Book icon" id="cnx_book_icon" />

                <p id="cnx_course_home">
                  <span class="cnx_before"> <!-- Inside collection: -->
                    <xsl:text>Inside Collection</xsl:text>
                    <xsl:if test="display/context/type[@fulltype!='']">
                      <xsl:text> </xsl:text>
                      <xsl:text>(</xsl:text>
                      <xsl:value-of select="display/context/type/@fulltype"/>
                      <xsl:text>)</xsl:text>
                    </xsl:if>
                    <xsl:text>: </xsl:text>
                  </span>
                  <span class="name">
                    <a href="{$collurl}">
                      <xsl:value-of select="$colltitle"/>
                    </a>
                  </span>
                </p>
                <p id="cnx_course_authors">
                  <span class="cnx_before"> <!-- Course by:  -->
                    <xsl:value-of select="display/context/type/@shorttype"/>
                    <xsl:text>&#160;</xsl:text>
                    <xsl:text>by</xsl:text>
                    <xsl:text>: </xsl:text>
                  </span>
                  <xsl:for-each select="display/context/authors/author">
                    <a href="{publishing/portal/@href}/member_profile/{@id}">
                      <xsl:value-of select="name"/>
                    </a>
                    <xsl:if test="position()!=last()">
                      <xsl:text>, </xsl:text>
                    </xsl:if>
                    <xsl:if test="position()=last()">
                      <xsl:text>. </xsl:text>
                    </xsl:if>
                  </xsl:for-each>
                  <xsl:text> </xsl:text>
                  <xsl:call-template name="emailtheauthor">
                    <xsl:with-param name="atbottom">0</xsl:with-param>
                    <xsl:with-param name="whichauthors">collection</xsl:with-param>
                  </xsl:call-template>
                </p>

            <xsl:if test="$previous or $next">
              <div id="cnx_prev_next_top">
              <ul>
                <xsl:if test="$previous">
                  <li class="cnx_first">
                    <a href="{$previous/@href}"> 
                      <xsl:text>&#171; Previous</xsl:text>
                      <span class="hiddenStructure">
                        <xsl:text> module in collection</xsl:text>
                      </span>
                    </a>
                  </li>
                </xsl:if>
                <xsl:if test="$next">
                  <li>
                    <xsl:if test="not($previous)">
                      <xsl:attribute name="class">cnx_first</xsl:attribute>
                    </xsl:if>
                    <a href="{$next/@href}">
                      <xsl:text>Next</xsl:text>
                      <span class="hiddenStructure">
                        <xsl:text> module in collection</xsl:text>
                      </span>
                      <xsl:text> &#187;</xsl:text>
                    </a>
                  </li>
                </xsl:if>
              </ul>
              </div>
            </xsl:if>

          </div>
        </xsl:if>

      <div id="cnx_module_header">
        <xsl:if test="not(display/offline)">
          <xsl:if test="publishing/state[text()!='public']">
            <div class="cnx_warning">
                          <p class="cnx_warning_text">
              <span class="cnx_before">
                            <!-- Note: -->
                <xsl:text>Note:</xsl:text>
                          </span>
                          <xsl:text> </xsl:text>
              <!-- This is a preview of how your module will appear when published -->
              <xsl:text>This is a preview of how your module will appear when published</xsl:text>
              <xsl:if test="metadata[contains(@pending,'roles')]">
                <!-- , assuming that all -->
                <xsl:text>, assuming that all</xsl:text>
                            <xsl:text> </xsl:text>
                <a href="content_roles">
            <!-- currently pending role requests -->
            <xsl:text>currently pending role requests</xsl:text>
                </a>
                            <xsl:text> </xsl:text>
                <!-- are accepted -->
                <xsl:text>are accepted</xsl:text>
              </xsl:if>
              <!-- . -->
              <xsl:text>.</xsl:text>
                          <xsl:text> </xsl:text>
              <!-- You must return to the editing interface to --> 
              <xsl:text>You must return to the editing interface to</xsl:text>
                          <xsl:text> </xsl:text>
              <a href="module_text">
                <!-- edit -->
                <xsl:text>edit</xsl:text>
              </a> 
                          <xsl:text> </xsl:text>
              <!-- or --> 
              <xsl:text>or</xsl:text>
                          <xsl:text> </xsl:text>
              <a href="module_publish">
                <!-- publish -->
                <xsl:text>publish</xsl:text>
              </a> 
                          <xsl:text> </xsl:text>
              <!-- your changes. --> 
              <xsl:text>your changes.</xsl:text>
              <xsl:if test="publishing/state[text()!='created']">
                            <xsl:text> </xsl:text>
                <!-- You may view the -->
                <xsl:text>You may view the</xsl:text> 
                            <xsl:text> </xsl:text>
                <a href="{publishing/portal/@href}/content/{$objectId}/latest/">
            <!-- latest published version -->
            <xsl:text>latest published version</xsl:text>
                </a>
                            <xsl:text> </xsl:text>
                <!-- here and a -->
                <xsl:text>here and a</xsl:text>
                            <xsl:text> </xsl:text>
                <a href="diff">
            <!-- list of changes -->
            <xsl:text>list of changes</xsl:text>
                </a>
                            <xsl:text> </xsl:text>
                <!-- here. -->
                <xsl:text>here.</xsl:text>
              </xsl:if>
                          </p>

              <xsl:if test="$customize-style != ''">
                <p class="cnx_warning_text">
                  <span class="cnx_before">
                    "Modern Textbook" note:
                  </span>
                  You are previewing this module in the "Modern Textbook" style.  When you publish the module, 
                  it will only display in the "Modern Textbook" style when in the context of a collection that 
                  has the "Modern Textbook" parameter set.
                </p>
              </xsl:if>
            </div>
          </xsl:if>
        </xsl:if>
<!--
              <xsl:if test="display/statusmessage">
                <xsl:for-each select="display/statusmessage/div">
                  <div class="statusmessage">
                    <xsl:comment>possible class values: portalMessage, portalWarningMessage, portalStopMessage 
                       but we will mostly use portalMessage</xsl:comment>
                    <xsl:attribute name="class"><xsl:value-of select="./@class" /></xsl:attribute>
                    <xsl:value-of select="." />
                  </div>
                </xsl:for-each>
              </xsl:if>
-->

              <xsl:if test="publishing/state[text()='public']">
                <div class="cnx_social_media" id="cnx_social_media_top" style="display: block; float: right;">
 		          <span class="cnx_google">
                      <iframe scrolling="no" frameborder="0" vspace="0" tabindex="-1" style="position: static; left: 0pt; top: 0pt; width: 65px; height: 20px; visibility: visible;" src="https://plusone.google.com/_/+1/fastbutton?hl=en-US&amp;url={$social-url-escaped}&amp;size=medium&amp;annotation=bubble&amp;count=true&amp;parent=http%3A%2F%2Fcnx.org" marginwidth="0" marginheight="0" hspace="0" allowtransparency="true"><xsl:text> </xsl:text></iframe>
                  </span> 
                  <span class="cnx_facebook">
                    <iframe src="http://www.facebook.com/plugins/like.php?href={$social-url-escaped}&amp;layout=button_count&amp;show_faces=false&amp;action=like&amp;colorscheme=light"
                            scrolling="no" frameborder="0" allowtransparency="true">
                      <xsl:text> </xsl:text>
                    </iframe>
                  </span>
                  <span class="cnx_twitter">
                    <iframe scrolling="no" frameborder="0" allowtransparency="true" class="twitter-share-button twitter-count-horizontal" title="Tweet Button">
                      <xsl:attribute name="src">
                        <xsl:text>http://platform.twitter.com/widgets/tweet_button.html?count=horizontal&amp;lang=en&amp;text=</xsl:text>
                        <xsl:value-of select="$moduletitle"/>
                        <xsl:text>&amp;url=</xsl:text>
                        <xsl:value-of select="$social-url-escaped"/>
                        <xsl:text>&amp;counturl=</xsl:text>
                        <xsl:value-of select="/module/display/base/@href-latest-escaped"/>
                        <xsl:if test="publishing/portal/@isCNX='true'">
                          <xsl:text>&amp;via=cnxorg</xsl:text>
                        </xsl:if>
                      </xsl:attribute>
                      <xsl:text> </xsl:text>
                    </iframe>
                  </span>
                </div>
              </xsl:if>

              <h1 id="cnx_content_title">
                <xsl:if test="$intro-module='1' and $customize-style != ''">
                  <span class="cnx_before">
                    <xsl:text>Module: </xsl:text>
                  </span>
                </xsl:if>
                <xsl:value-of select="$moduletitle"/>
              </h1>

              <p id="cnx_authorship">
                <span class="cnx_before"><!-- Module by: -->
                  <xsl:text>Module by:</xsl:text>
                </span>
                <xsl:text> </xsl:text>
                <xsl:for-each select="metadata/author">
                  <a href="{publishing/portal/@href}/member_profile/{@id}">
                    <xsl:value-of select="name"/>
                  </a>
                  <xsl:if test="position()!=last()">
                    <xsl:text>, </xsl:text>
                  </xsl:if>
                  <xsl:if test="position()=last()">
                    <xsl:text>.</xsl:text>
                  </xsl:if>
                  <xsl:text> </xsl:text>
                </xsl:for-each>
                <xsl:text> </xsl:text>
                <xsl:call-template name="emailtheauthor">
                  <xsl:with-param name="atbottom">0</xsl:with-param>
                  <xsl:with-param name="whichauthors">modulenocontext</xsl:with-param>
                </xsl:call-template>

                <xsl:for-each select="metadata/optionalrole[generate-id() = generate-id(key('optionalroles',@name)[1])]">
                  <xsl:call-template name="optionalroles">
                    <xsl:with-param name="rolename">
                      <xsl:value-of select="@name"/>
                    </xsl:with-param>
                  </xsl:call-template>
                </xsl:for-each>

              </p>

	      <xsl:if test="metadata/parent">
		  <p id="cnx_parent">
		    <span class="cnx_before">
	              <xsl:text>Based on: </xsl:text>
		    </span>
		    <a href="{metadata/parent/@href}">
                      <xsl:apply-templates select="metadata/parent/title"/>
                    </a>
	            <xsl:text> by </xsl:text>
		    <xsl:for-each select="metadata/parent/author">
		      <a href="{publishing/portal/@href}/member_profile/{@id}">
			<xsl:value-of select="name"/>
		      </a>
		      <xsl:if test="position()!=last()">
	                <xsl:text>, </xsl:text>
	              </xsl:if>
		    </xsl:for-each>
	            <xsl:text> </xsl:text>
		  </p>
	      </xsl:if>

              <!-- Ratings disabled, but ratings code left in, in case there are other Rhaptos instances using them.
              <xsl:if test="/module/rating">
                <div id="cnx_rate" class="ratings">
                  <span class="cnx_before">User rating </span>
                  <span class="lensinfowrap">
                    <a href="{publishing/portal/@href}/help/viewing/ratings" class="lenslink">(<span class="hiddenStructure">How does the rating system work</span>?)</a>
                    <div class="lensinfo hiddenStructure">
                      <span class="cnx_before">Ratings</span>
                      <p>
                        Ratings allow you to judge the quality of modules. If other users have ranked the module then its average
                        rating is displayed below. Ratings are calculated on a scale from one star (Poor) to five stars (Excellent).
                      </p>
                      <span class="cnx_before">How to rate a module</span>
                      <p>
                        Hover over the star that corresponds to the rating you wish to assign. Click on the star to add your rating.
                        Your rating should be based on the quality of the content. You must have an account and be logged in to rate
                        content.
                      </p>
                    </div>
                  </span>
                  <xsl:text>: </xsl:text>

                  <span id="cnx_rating_stars" class="ratingstars">
                    <span class="lensinfowrap">
                      <div class="lensinfo hiddenStructure">
                        <xsl:for-each select="/module/rating/stars/star">
                          <span id="content-render-rating-exp{@value}" style="display: none;">
                            <xsl:value-of select="@value_label"/>
                          </span>
                        </xsl:for-each>
                      </div>
                      <xsl:for-each select="/module/rating/stars/star">
                        <xsl:variable name="whichstar">
                          <xsl:choose>
                            <xsl:when test="@selected = '1'"><xsl:value-of select="/module/publishing/portal/@href"/>/full_star.png</xsl:when>
                            <xsl:when test="@selected = '0.5'"><xsl:value-of select="/module/publishing/portal/@href"/>/half_star.png</xsl:when>
                            <xsl:otherwise><xsl:value-of select="/module/publishing/portal/@href"/>/empty_star.png</xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="can_rate" select="/module/rating/@can_rate" />
                        <a href="rate?value:int={@value}" onmouseout="clearRatings(5);">
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="$can_rate = '0'">lenslink cannotrate</xsl:when>
                              <xsl:otherwise>lenslink</xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="onmouseover">
                            <xsl:text>previewRating(</xsl:text>
                            <xsl:value-of select="@value"/>
                            <xsl:choose>
                              <xsl:when test="$can_rate = '0'">, 5, 0);</xsl:when>
                              <xsl:otherwise>, 5, 1);</xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <img id="content-render-rating-star{@value}" src="{$whichstar}" original_src="{$whichstar}"/>
                        </a>
                      </xsl:for-each>
                    </span>
                    <span id="cnx_rating_quantity" class="rating_quantity">
                      <span id="content-render-rating-ratings">
                        <xsl:text>(</xsl:text>
                        <xsl:value-of select="/module/rating/@number_of_ratings"/>
                  			<xsl:choose>		
                  				<xsl:when test="/module/rating/@number_of_ratings = '1'"> rating)</xsl:when>
                  				<xsl:otherwise> ratings)</xsl:otherwise>
               		      </xsl:choose>     
                      </span>	
                      <span id="content-render-rating-login" style="display: none;">
                        <xsl:text>(Login required)</xsl:text>
                      </span>
                    </span>
                  </span>

                </div>

              </xsl:if>
              -->

	      <xsl:if test="metadata/abstract">
		<p id="cnx_abstract">
		  <span class="cnx_before"><!-- Summary: -->
	            <xsl:text>Summary:</xsl:text>
	            <xsl:text> </xsl:text>
	          </span>
		  <xsl:apply-templates select="metadata/abstract"/>
		</p>
	      </xsl:if>

	      <xsl:if test="not(publishing/version/@latest='true') and not(display/context)">
		<div class="cnx_warning">
                  <p class="cnx_warning_text">
		  <span class="cnx_before">
                    <!-- Note: -->
	            <xsl:text>Note:</xsl:text>
                  </span>
	          <xsl:text> </xsl:text>
	          <!-- You are viewing an old version of this document. -->
	          <xsl:text>You are viewing an old version of this document.</xsl:text>   
	          <xsl:text> </xsl:text>      
		  <a href="{publishing/portal/@href}/content/{$objectId}/latest/">
	            <!-- The latest version is available here. -->
	            <xsl:text>The latest version is available here.</xsl:text></a>
                  </p>
		</div>
	      </xsl:if>

	            
	    </div>

            <!-- Banner showing chapter number and title for 'Modern Textbook' introduction modules. -->
            <xsl:for-each select="display/context/navigation/ul//li[@id=$objectId]">
              <xsl:if test="$intro-module='1' and $customize-style != '' and ancestor::li">
                <div id="cnx_chapter_intro_banner">
                  <span id="cnx_chapter_intro_banner_number">
                    <xsl:number count="display/context/navigation/ul//li[ul and not(ul//ul)]" level="any"/>
                  </span>
                  <span id="cnx_chapter_intro_banner_title">
                    <xsl:variable name="subcollection" select="ancestor::li[1]"/>
                    <xsl:variable name="chapter-title" select="$subcollection/*[@class='cnx_chapter_header']/text()"/>
                    <!-- If we're in a collection of subtype 'Textbook', we need to cut off the autogenerated number that's been injected in. -->
                    <xsl:choose>
                      <xsl:when test="ancestor::context/type/@fulltype='Textbook' and not($subcollection/ancestor::li)">
                        <xsl:value-of select="substring-after($chapter-title,'. ')"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$chapter-title"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </span>
                </div>
              </xsl:if>
            </xsl:for-each>

            <!-- Splash image for 'Modern Textbook' introduction modules. -->
            <xsl:if test="$intro-module='1' and $customize-style != ''">
              <xsl:for-each select="cnx:document//cnx:figure[@class='splash' and cnx:media/cnx:image[not(@for='pdf')]][1]">
                <div id="cnx_splash">
                  <div id="cnx_splash_image">
                    <xsl:apply-templates select="cnx:media"/>
                  </div>
                  <xsl:call-template name="caption">
                    <xsl:with-param name="captionelement">div</xsl:with-param>
                  </xsl:call-template>
                </div>
              </xsl:for-each>
            </xsl:if>

            <div class="cnx_clear" />

	    <xsl:if test="$authorlinks and not(display/context) or $courselinks">
	      <!-- This gets each appropriate type of link available only once -->
	      <div class="portletContainer" id="cnx_author_links">
                <dl class="portlet">
                  <dt class="portletHeader">
                    <span class="portletTopLeft"><xsl:text> </xsl:text></span>
                    <!-- Links -->
                    <span><h2>
                      <xsl:text>Links</xsl:text>
                    </h2></span>
                    <span class="portletTopRight"><xsl:text> </xsl:text></span>
                  </dt>
                  <dd class="portletItem odd" id="cnx_author_links_togglers">
		    <xsl:if test="not(display/twisties/featuredlinkscollapsed)">
		      <xsl:attribute name="style">display: none;</xsl:attribute>
		    </xsl:if>
		    <div id="cnx_author_links_expand" class="cnx_toggler">
		      <xsl:attribute name="style">
		        <xsl:choose>
			  <xsl:when test="display/twisties/featuredlinkscollapsed = 'true'">display: block;</xsl:when>
		          <xsl:otherwise>display: none;</xsl:otherwise>
			</xsl:choose>
		      </xsl:attribute>
		      [<a href="#" onclick="twist_toggle('cnx_author_links'); return false;">
			<xsl:text>show</xsl:text>
                        <span class="hiddenStructure">
                          <xsl:text> </xsl:text>
                          <xsl:text>links</xsl:text>
                        </span>
		      </a>]
		    </div>
		    <div id="cnx_author_links_collapse" class="cnx_toggler">
		      <xsl:attribute name="style">
		        <xsl:choose>
			  <xsl:when test="display/twisties/featuredlinkscollapsed = 'false'">display: block;</xsl:when>
		          <xsl:otherwise>display: none;</xsl:otherwise>
			</xsl:choose>
		      </xsl:attribute>
		      [<a href="#" onclick="twist_toggle('cnx_author_links'); return false;">
			<xsl:text>hide</xsl:text>
                        <span class="hiddenStructure">
                          <xsl:text> </xsl:text>
                          <xsl:text>links</xsl:text>
                        </span>
		      </a>]
		    </div>
		  </dd>
		  <dd class="portletItem even" id="cnx_author_links_contents">
		    <xsl:if test="display/twisties/featuredlinkscollapsed = 'true'">
		      <xsl:attribute name="style">display: none;</xsl:attribute>
		    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="$authorlinks and not(display/context)">
                        <xsl:for-each select="$authorlinks[generate-id() = generate-id(key('authorlinkstype',@rel)[1])]">
                          <xsl:sort select="@rel"/>
                          <xsl:call-template name="links">
                            <xsl:with-param name="linktype"><xsl:value-of select="@rel"/></xsl:with-param>
                          </xsl:call-template>
                        </xsl:for-each>
                      </xsl:when>
                      <xsl:when test="$courselinks">
                        <xsl:for-each select="$courselinks[generate-id() = generate-id(key('courselinkstype',@rel)[1])]">
                          <xsl:sort select="@rel"/>
                          <xsl:call-template name="links">
                            <xsl:with-param name="linktype"><xsl:value-of select="@rel"/></xsl:with-param>
                          </xsl:call-template>
                        </xsl:for-each>
                      </xsl:when>
                    </xsl:choose>
		  </dd>
		</dl>
	      </div>
	    </xsl:if>

            <xsl:if test="$intro-module='1' and $customize-style != ''">
              <div id="cnx_intro_title">
                <h1>
                  <xsl:value-of select="$moduletitle"/>
                </h1>
              </div>
            </xsl:if>

	    <xsl:apply-templates select="cnx:document"/>

            <xsl:if test="$previous or $next">
              <h2 class="hiddenStructure">
                <!-- Collection Navigation -->
                <xsl:text>Collection Navigation</xsl:text>
              </h2>
              <ul id="cnx_prev_next_bottom">
                <li class="cnx_previous">
                  <xsl:choose>
                    <xsl:when test="$previous">
                      <a href="{$previous/@href}" class="cnxn">
                        <span class="cnx_before">
                          <!-- &#171; Previous module -->
                          <xsl:text>&#171; Previous module</xsl:text>
                          <span class="hiddenStructure">
                            <xsl:text> </xsl:text>
                            <!-- in collection -->
                            <xsl:text>in collection</xsl:text>
                          </span>
                        </span>
                        <xsl:text> </xsl:text>
                        <xsl:value-of select="$previous/@title"/>
                      </a>
                    </xsl:when>
                    <xsl:otherwise>&#160;</xsl:otherwise>
                  </xsl:choose>
                </li>
                <li class="cnxn_toc">
                  <a href="{$collurl}" class="cnxn">
                    <span class="cnx_before">
                      <!-- Collection home: -->
                      <xsl:text>Collection home: </xsl:text>
                    </span>
                    <xsl:value-of select="$colltitle"/>
                  </a>
                </li>
                <li class="cnx_next">
                  <xsl:choose>
                    <xsl:when test="$next">
                      <a href="{$next/@href}" class="cnxn">
                        <span class="cnx_before">
                          <!-- Next module -->
                          <xsl:text>Next module</xsl:text>
                          <span class="hiddenStructure">
                            <xsl:text> </xsl:text>
                            <!-- in collection -->
                            <xsl:text>in collection</xsl:text>
                          </span>
                          <xsl:text> </xsl:text>
                          <!-- #187; -->
                          <xsl:text> &#187; </xsl:text>                          
                        </span>
                        <xsl:value-of select="$next/@title"/> 
                      </a>
                    </xsl:when>
                    <xsl:otherwise>&#160;</xsl:otherwise>
                  </xsl:choose>
                </li>
              </ul>
            </xsl:if>

            <div id="cnx_actions_bottom">
              <xsl:if test="not(display/offline)">
                <xsl:apply-templates select="structure/contentactionsbottom/*|structure/contentactionsbottom/@*"/>
              </xsl:if>
            </div>

	    <div id="cnx_footer">

              <h2 class="hiddenStructure">
                <xsl:text>Footer</xsl:text>
              </h2>

              <xsl:if test="not(display/offline)">

                <div id="cnx_partner_logos">
                  <a id="cnx_license_logo" href="{metadata/license/@href}">
                    <img>
                      <xsl:attribute name="src">
                        <xsl:text>http://i.creativecommons.org/l/by/</xsl:text>
                        <xsl:choose>
                          <xsl:when test="contains(metadata/license/@href, '1.0')">1.0</xsl:when>
                          <xsl:when test="contains(metadata/license/@href, '2.0')">2.0</xsl:when>
                          <xsl:otherwise>3.0</xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>/88x31.png</xsl:text>
                      </xsl:attribute>
                      <xsl:attribute name="alt">
                        <!-- Creative Commons License -->
                        <xsl:text>Creative Commons License</xsl:text>
                      </xsl:attribute>
                    </img>
                  </a>
                  <xsl:text> </xsl:text>
                  <a id="cnx_oer_logo" 
                     xmlns:dct="http://purl.org/dc/terms/"
                     href="http://opened.creativecommons.org/definition"
                     rel="dct:conformsTo">
                    <img src="http://i.creativecommons.org/d/oer/88x31.gif">
                      <xsl:attribute name="alt">
                        <!-- Open Educational Resources Logo -->
                        <xsl:text>Open Educational Resources Logo</xsl:text>
                      </xsl:attribute>
                    </img>
                  </a>
                </div>

                <div id="cnx_metadata_links">
                  <p>
                    <span id="cnx_more_about">
                      <!-- More about this content:  -->
                      <xsl:text>More about this module:</xsl:text>
                    </span>
                    <xsl:text> </xsl:text>
                    <a href="content_info">
                      <xsl:text>Metadata</xsl:text>
                    </a>
                    <span> | </span>
                    <a href="content_info#cnx_downloads_header">
                      <xsl:text>Downloads</xsl:text>
                    </a>
                    <span> | </span>
                    <a href="content_info#cnx_history_header">
                      <xsl:text>Version History</xsl:text>
                    </a>
                  </p>
                  <ul id="cnx_attribution">
                    <li>
                      <a href="content_info#cnx_attribution_header">
                        <!-- How to -->
                        <xsl:text>How to </xsl:text>
                        <b>
                          <!-- reuse -->
                          <xsl:text>reuse</xsl:text>
                        </b>
                        <xsl:text> </xsl:text>
                        <!-- and attribute this content -->
                        <xsl:text>and attribute this content</xsl:text>
                      </a>
                    </li>
                    <li>
                      <a href="content_info#cnx_cite_header">
                        <!-- How to -->
                        <xsl:text>How to </xsl:text>
                        <b>
                          <!-- cite -->
                          <xsl:text>cite</xsl:text>
                        </b>
                        <xsl:text> </xsl:text>
                        <!-- and attribute this content -->
                        <xsl:text>and attribute this content</xsl:text>
                      </a>
                    </li>
                  </ul>
                </div>
              </xsl:if>

                <p id="cnx_license">
                  <!-- This work is licensed by -->
                  <xsl:text>This work is licensed by </xsl:text>
                  <!-- we have to condition the whole block because the condition doesn't work inside the foreach -->
                  <xsl:if test="not(display/offline)">
                    <xsl:for-each select="metadata/licensor">
                      <xsl:if test="position()=last() and count(../licensor) > 1"><!-- and -->
                        <xsl:text> and </xsl:text>
                      </xsl:if>
                      <a href="{publishing/portal/@href}/member_profile/{@id}">
                        <xsl:apply-templates select="name" />
                      </a>
                      <xsl:if test="position()!=last() and count(../licensor) > 2"><!-- , -->
                        <xsl:text>, </xsl:text>
                      </xsl:if>
                    </xsl:for-each>
                  </xsl:if>
                  <xsl:if test="display/offline">
                    <xsl:for-each select="metadata/licensor">
                      <xsl:if test="position()=last() and count(../licensor) > 1"><!-- and -->
                          <xsl:text> and </xsl:text>
                      </xsl:if>
                      <xsl:apply-templates select="name" />
                      <xsl:if test="position()!=last() and count(../licensor) > 2"><!-- , -->
                        <xsl:text>, </xsl:text>
                      </xsl:if>
                      <xsl:text> </xsl:text>
                    </xsl:for-each>
                  </xsl:if>
                  <xsl:text> under a </xsl:text>
                  <a rel="license" href="{metadata/license/@href}">
                    <!-- Creative Commons Attribution License -->
                    <xsl:text>Creative Commons Attribution License</xsl:text>
                    <xsl:text> </xsl:text>
                    <xsl:choose>
                      <xsl:when test="contains(metadata/license/@href, '1.0')">(CC-BY 1.0)</xsl:when>
                      <xsl:when test="contains(metadata/license/@href, '2.0')">(CC-BY 2.0)</xsl:when>
                      <xsl:otherwise>(CC-BY 3.0)</xsl:otherwise>
                    </xsl:choose>
                  </a>
                  <!-- , and is an -->
                  <xsl:text>, and is an </xsl:text>
                  <a xmlns:dct="http://purl.org/dc/terms/" 
                     href="http://opened.creativecommons.org/definition" 
                     rel="dct:conformsTo">
                    <!-- Open Educational Resource -->
                    <xsl:text>Open Educational Resource</xsl:text>
                  </a>
                  <!-- .  -->
                  <xsl:text>. </xsl:text>
                </p>

	      <p id="cnx_updated">
                <!-- Last edited by -->
                <xsl:text>Last edited by </xsl:text>
		<xsl:choose>
                  <xsl:when test="publishing/submitter/@id and not(display/offline)">
                    <a href="{publishing/portal/@href}/member_profile/{publishing/submitter/@id}">
                      <xsl:value-of select="publishing/submitter" />
                    </a>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="publishing/submitter" />
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:text> </xsl:text>
	        <!-- on --> 
	        <xsl:text>on</xsl:text>
	        <xsl:text> </xsl:text>
	        <xsl:value-of select="publishing/revised"/>
	        <!-- .  -->
	        <xsl:text>. </xsl:text>
	      </p>

	    </div>

      </div>

    </div>
  </xsl:template>

  <!-- 
    MP3 AUDIO (Tony Brandt Gallery style). These override less specific templates in media.xsl.  
    Customizations:
    - Instead of putting the "id" on in-flow element, it feeds it through to the JS function. 
    - It creates a label of "Musical Example:" instead of "Audio File:"
  -->
  <!-- (cnxml version 0.5 and below) -->
  <xsl:template match="cnx:media[@type='audio/mpeg']">
    <xsl:choose>
      <xsl:when test="$xsl_gallery">
        <div class="media audio">
          <span class="cnx_label">
            <!--Musical Example:-->
            <xsl:call-template name="gentext">
              <xsl:with-param name="key">MusicalExample</xsl:with-param>
              <xsl:with-param name="lang" select="/module/metadata/language"/>
            </xsl:call-template>:
          </span>
          <a class="cnxn" href="javascript:toggleBar('{@id}')">
            <xsl:call-template name="composer-title-comments"/>
          </a>
        </div>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-imports/>
      </xsl:otherwise>       
    </xsl:choose>
  </xsl:template>
  <!-- (cnxml version 0.6+) -->
  <xsl:template match="cnx:audio[@mime-type='audio/mpeg']">
    <xsl:choose>
      <xsl:when test="$xsl_gallery">
        <span class="media">
          <xsl:if test="parent::cnx:media/@display">
            <xsl:attribute name="class">
              <xsl:text>media </xsl:text> 
              <xsl:value-of select="parent::cnx:media/@display"/>
            </xsl:attribute>
          </xsl:if>
          <span class="audio">
            <xsl:call-template name="IdCheck"/>
            <span class="cnx_label">
              <!--Musical Example:-->
              <xsl:call-template name="gentext">
                <xsl:with-param name="key">MusicalExample</xsl:with-param>
                <xsl:with-param name="lang" select="/module/metadata/language"/>
              </xsl:call-template>:
            </span>
            <a class="cnxn" href="javascript:toggleBar('{parent::cnx:media/@id}')">
              <xsl:call-template name="composer-title-comments"/>
            </a>
          </span>
        </span>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-imports/>
      </xsl:otherwise>       
    </xsl:choose>
  </xsl:template>

  <xsl:template name="tt">
    <xsl:if test="cnx:param[@name='total-time' and normalize-space(@value)!='']">
      <xsl:variable name="tt-number" select="number(cnx:param[@name='total-time']/@value)"/>
      <xsl:variable name="minutes" select="floor(format-number($tt-number div 60,'#.####'))"/>
      <xsl:variable name="seconds" select="format-number(($tt-number div 60 - $minutes) * 60,'00')"/>
      <i><xsl:text> (</xsl:text><xsl:value-of select="$minutes"/><xsl:text>:</xsl:text><xsl:value-of select="$seconds"/><xsl:text>) </xsl:text></i>
    </xsl:if>
  </xsl:template>
  
  <xsl:template name="optionalroles">
    <xsl:param name="rolename"/>
    <span class="cnx_optional_role">
      <span class="cnx_before">
        <xsl:value-of select="@displaybyline"/>:
      </span>
      <xsl:text> </xsl:text>
      <xsl:for-each select="../optionalrole[@name=$rolename]">
        <a href="{publishing/portal/@href}/member_profile/{@id}">
          <xsl:value-of select="name"/>
        </a>
        <xsl:if test="position()!=last()">, </xsl:if>
      </xsl:for-each>
    </span>
  </xsl:template>

  <xsl:template name="links">
    <xsl:param name="linktype"/>
    <h3>
      <!-- Get the type of link, capitalize the first letter, then add " links" to it -->
      <xsl:variable name="lower" select="'abcdefghijklmnopqrstuvwxyz'"/>
      <xsl:variable name="upper" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
      <xsl:call-template name="gentext">
	<xsl:with-param name="key" select="concat(translate(substring($linktype,1,1),$lower,$upper),substring($linktype,2),' links')"/>
	<xsl:with-param name="lang" select="$modlang"/>
      </xsl:call-template>
    </h3>
    <ul class="links">
      <xsl:for-each select="../link[@rel=$linktype]">
	<xsl:sort select="@strength" data-type="number" order="descending"/>
        <xsl:variable name="strength-msg">
	  <xsl:choose>
            <xsl:when test="@strength='3'"><!-- Strongly related link -->
              <xsl:text>Strongly related link</xsl:text>
            </xsl:when>
            <xsl:when test="@strength='2'"><!-- Related link -->
              <xsl:text>Related link</xsl:text>
            </xsl:when>
            <xsl:when test="@strength='1'"><!-- Weakly related link -->
              <xsl:text>Weakly related link</xsl:text>
            </xsl:when>
          </xsl:choose>
        </xsl:variable>
        <li>
          <a href="{@href}" title="{$strength-msg}">
            <img src="{concat($stylesheetloc,'strength',@strength,'.png')}" alt="{$strength-msg}"/>
            <xsl:value-of select="@title"/>
          </a>
        </li>
      </xsl:for-each>
    </ul>
  </xsl:template>
  
<!-- Handle 'current' li for Collection TOC-->
  <xsl:template match="display/context/navigation//li">
    <xsl:choose>
      <xsl:when test="@id = $objectId">
        <xsl:element name="{local-name()}">
            <!-- go process attributes and children -->
            <xsl:attribute name="class">cnx_current</xsl:attribute>
            <xsl:apply-templates select="@*"/>
            <xsl:attribute name="id">current</xsl:attribute> <!-- must be after the @* (attributes) apply-templates line -->
            <xsl:value-of select="a"/>
            <xsl:apply-templates select="text()|*[not(self::a[1])]"/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="{local-name()}">
          <!-- go process attributes and children -->
          <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
<!-- -->
  
  <!-- There oughta be an easier way to do this. -->
  <xsl:template match="display/context/navigation//*">
    <xsl:element name="{local-name()}">
      <!-- go process attributes and children -->
      <xsl:apply-templates select="@*|node()"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="display/context/navigation//@*">
    <xsl:attribute name="{local-name()}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>

  <!-- More identity transforms for content actions top and bottom -->
  <xsl:template match="structure/contentactionstop//*">
    <xsl:element name="{local-name()}">
      <!-- go process attributes and children -->
      <xsl:apply-templates select="@*|node()"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="structure/contentactionstop//@*">
    <xsl:attribute name="{local-name()}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>

  <xsl:template match="structure/contentactionsbottom//*">
    <xsl:element name="{local-name()}">
      <!-- go process attributes and children -->
      <xsl:apply-templates select="@*|node()"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="structure/contentactionsbottom//@*">
    <xsl:attribute name="{local-name()}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>

  <!-- branding banners -->
  <xsl:template match="/module/display/branding">
    <div class="cnx_branding_banner">
      <xsl:attribute name="style">display:<xsl:value-of select="@visibility"/>; background-color:#<xsl:value-of select="@bannerColor"/>;color:#<xsl:value-of select="@bannerForegroundColor"/>;</xsl:attribute>
      <xsl:choose>
        <xsl:when test="@category='Endorsement'">
          Content endorsed by:
        </xsl:when>
        <xsl:when test="@category='Affiliation'">
          Content affiliated with:
        </xsl:when>
        <xsl:otherwise>
          Content included in lens:
        </xsl:otherwise>
      </xsl:choose>
      <a>
        <xsl:attribute name="href">
          <xsl:value-of select="@location"/>
        </xsl:attribute>
        <xsl:attribute name="style">color:#<xsl:value-of select="@bannerForegroundColor"/>;</xsl:attribute>
        <xsl:value-of select="@title"/>
      </a>
    </div>
  </xsl:template>

  <!-- branding logos -->
  <xsl:template match="/module/display/branding/@logo">
    <div class="cnx_branding_logo">
      <xsl:attribute name="style">display:<xsl:value-of select="../@visibility"/>;</xsl:attribute>
      <a>
          <xsl:attribute name="href">
            <xsl:value-of select="../@location"/>
          </xsl:attribute>
        <img>
          <xsl:attribute name="src">
            <xsl:value-of select="."/>
          </xsl:attribute>
          <xsl:attribute name="alt">
            <xsl:value-of select="../@title"/>
          </xsl:attribute>
        </img>
      </a>
    </div>
  </xsl:template>

  <!-- Lens entries -->
  <xsl:template name="lens">
    <xsl:variable name="direct" select="count(entry[not(@indirect)])"/>
    <xsl:variable name="contextual" select="count(entry[@indirect = 'contextual'])"/>
    <xsl:variable name="implicit" select="count(entry[@indirect = 'implicit'])"/>
    <li class="lensinfowrap">
      <xsl:if test="parent::category[@name='Favorites']">
        <xsl:attribute name="class">lensinfowrap cnx_favorites</xsl:attribute>
      </xsl:if>
      <a href="{@link}" class="lenslink"> <!-- {publishing/portal/@href} seems not to work, but we want it here -->
        <xsl:value-of select="@displayName"/>
      </a>

      <!-- Key image to show this is private -->
      <xsl:if test="contains(@state,'private') and not(parent::category[@name='Favorites'])">
        <xsl:text> </xsl:text>
        <img src="/private.gif">
          <xsl:attribute name="alt">
            <!-- Private lens key -->
            <xsl:text>Private lens key</xsl:text>
          </xsl:attribute>
          <xsl:attribute name="title">
            <!-- Private lens: seen only by lens maker while logged on -->
            <xsl:text>Private lens: seen only by lens maker while logged on</xsl:text>
          </xsl:attribute>
        </img>
      </xsl:if>

      <xsl:if test="entry/tag_namespaces or entry/tags">
        <span>
          <xsl:text> </xsl:text>
          <span class="tagicon" onclick="toggleLensTags(this);">
            <img src="/tags-closed.png" alt="display tags" title="Click to display tags" />
            <img src="/tags-open.png" alt="hide tags" title="Click to hide tags" style="display: none;"/>
          </span>
          <div class="lenstags" style="display: none;">
            <strong>
              <xsl:text>Tags</xsl:text>
            </strong>
            <!-- Pencil Picture -->
            <xsl:if test="not(/module/editing/anonymoususer)">
              <xsl:if test="(@state = 'published_open') or (@state = 'private_open')">
                <xsl:text> </xsl:text>
                <a href="lens_add_tags?lens_paths:list={/module/publishing/portal/@path}{@link}">
                  <img src="/pencil_cnx.png" alt="Edit tags" title="Edit tags" />
                </a>
              </xsl:if>
            </xsl:if>
            <ul class="cnx_tag_listing">
              <xsl:for-each select="entry/tags">
                <li>
                  <a href="{../../@link}/lens_view/{tag/title}" title="{tag/title}">
                    <xsl:value-of select="tag/title" />
                  </a>
                </li>
                <xsl:text> </xsl:text>
              </xsl:for-each>
              <xsl:for-each select="entry/tag_namespaces/tags[not(.=preceding::entry/tag_namespaces/tags)]">
                <li>
                  <a href="{../../../@link}/lens_view/{tag/prefixed}" title="{tag/title}">
                    <xsl:value-of select="tag/term" />
                  </a>
                </li>
                <xsl:text> </xsl:text>
              </xsl:for-each>    
            </ul>
          </div>
        </span>
      </xsl:if>

      <div class="lensinfo hiddenStructure">
        <xsl:if test="@logo">
          <img src="{@link}/logo_thumb" class="lensinfologo">
            <xsl:attribute name="alt">
              <!-- Logo for -->
              <xsl:text>Logo for</xsl:text>
              <xsl:text> </xsl:text>
              <xsl:value-of select="@creatorName"/>
            </xsl:attribute>
          </img>
        </xsl:if>

        <p>
          <span class="lensinfohelp">
            <xsl:choose>

              <!-- If module is explicit and explicit collection -->
              <xsl:when test="$direct and $contextual">
                <!-- This module and collection are included in -->
                <xsl:text>This module and collection are included in</xsl:text>
              </xsl:when>

              <!-- If module is not explicit and explicit collection -->
              <xsl:when test="not($direct) and $contextual">
                <!-- This collection is included in -->
                <xsl:text>This collection is included in</xsl:text>
              </xsl:when>

              <!-- If module is explicit and no explicit collection OR 
                   implicit collection(s) -->
              <xsl:otherwise>
                  
                <!-- This module is included in -->	
                <xsl:choose>
                  <xsl:when test="entry[@approved = '1']">
                    <xsl:text>This module is approved and included in</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>This module is included in</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>

            </xsl:choose>


            <xsl:if test="@title = @creatorName">
              <!-- a -->
              <xsl:text> </xsl:text>
              <xsl:text>a</xsl:text>
            </xsl:if>
          </span>

          <xsl:if test="@title = @creatorName">
            <strong>
              <!-- Lens by: -->
              <xsl:text>Lens by:</xsl:text>
            </strong>
            <xsl:text> </xsl:text>
            <span class="lensinfotitle">
              <xsl:value-of select="@creatorName"/>
            </span>
          </xsl:if>
          <xsl:if test="not(@title = @creatorName)">
            <strong>
              <!-- Lens: -->
              <xsl:text>Lens:</xsl:text>
            </strong>
            <xsl:text> </xsl:text>
            <span class="lensinfotitle">
              <xsl:value-of select="@title"/>
            </span>
            <br/>
            <strong>
              <!-- By: -->
              <xsl:text>By: </xsl:text>
            </strong>           
            <xsl:text> </xsl:text>
            <xsl:value-of select="@creatorName"/>

            <!--
            <xsl:if test="entry[@printableTags != '']">
              <br />
              <strong>
                <xsl:text>Tags:</xsl:text>
              <xsl:text> </xsl:text>
              </strong> 
              <xsl:value-of select="entry/@printableTags" />
            </xsl:if>
            -->

          </xsl:if>         
          <xsl:if test="not($direct) and not($contextual)">
            <span class="lensinfohelp">
              <xsl:choose>
                <xsl:when test="$implicit &gt; 1">
                  <!-- As a part of collections: (plural) -->
                  <xsl:text>As a part of collections: </xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <!-- As a part of collection: (singular) -->
                  <xsl:text>As a part of collection: </xsl:text>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:for-each select="entry[@indirect != 'contextual']">
                <span class="lensinfocollectionname">
                  <!-- " -->
                  <xsl:text>"</xsl:text>
                  <xsl:value-of select="title"/>
                  <!-- " -->
                  <xsl:text>"</xsl:text>
                  <xsl:if test="position()!=last()">
                    <!-- ,  -->
                    <xsl:text>, </xsl:text>
                  </xsl:if>
                </span>
              </xsl:for-each>
            </span>
          </xsl:if>
        </p>
        <!-- show the approved review status if lens is open -->
        <xsl:if test="contains(@state, '_open')">
          <div class="lensinfoapproval">
            <xsl:if test="$direct">
              <div>
                <xsl:choose>
                  <xsl:when test="$contextual">
                    <strong>Module Review Status:</strong>
                  </xsl:when>
                  <xsl:otherwise>
                    <strong>Review Status:</strong>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="entry[not(@indirect)][@approved = '1']">
                    <xsl:text> Approved</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text> In Review</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </div>
            </xsl:if>
            <xsl:if test="$contextual">
              <div>
                <strong>Collection Review Status:</strong>
                <xsl:choose>
                  <xsl:when test="entry[@indirect = 'contextual'][@approved = '1']">
                    <xsl:text> Approved</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text> In Review</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </div>
            </xsl:if>
            <xsl:if test="not($direct) and not($contextual)">
            <!-- Done this way instead of testing $implicit to avoid the
                 case where the lens also explicitly includes the module
                 or the collection -->
              <div>
                <strong>Collection Review Status:</strong>
                <xsl:choose>
                  <xsl:when test="$implicit &gt; 1">
                  <!-- More than one implicit case -->
                    <xsl:for-each select="entry[@indirect]">
                      <xsl:text> "</xsl:text>
                      <xsl:value-of select="title" />
                      <xsl:text>"</xsl:text>
                      <xsl:choose>
                        <xsl:when test="@approved = '1'">
                          <xsl:text> approved</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> in review</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:if test="position()!=last()">
                        <xsl:text>,</xsl:text>
                      </xsl:if>
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                  <!-- Just one implicit case -->
                    <xsl:choose>
                      <xsl:when test="entry[@approved = '1']">
                        <xsl:text> Approved</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text> In Review</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </div>
            </xsl:if>
          </div>
        </xsl:if>

        <xsl:if test="($contextual + $direct = 0 and entry[@indirect = 'implicit']/comment) or (entry[@indirect = 'contextual' or not(@indirect)]/comment)">
          <div class="lensinfocomments">
            <strong>
              <!-- Comments: -->
              <xsl:text>Comments:</xsl:text>
            </strong>
            <xsl:choose>
              <xsl:when test="$contextual + $direct = 0">
                <xsl:for-each select="entry[@indirect = 'implicit']/comment">
                  <p>
                    <xsl:text>"</xsl:text>
                    <xsl:value-of select="."/>
                    <xsl:text>"</xsl:text>
                  </p>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="entry[@indirect = 'contextual' or not(@indirect)]/comment">
                  <p>
                    <!-- " -->
                    <xsl:text>"</xsl:text>
                    <xsl:value-of select="."/>
                    <!-- " -->
                    <xsl:text>"</xsl:text>
                  </p>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
          </div>
        </xsl:if>

        <p class="lensinfohelp">
          Click the
          <strong>
            <xsl:text>"</xsl:text>
            <xsl:value-of select="@displayName"/>
            <xsl:text>"</xsl:text>
          </strong>
          <xsl:choose>
            <xsl:when test="parent::category[@name='Endorsement']">
              link to see all content they endorse.
            </xsl:when>
            <xsl:when test="parent::category[@name='Affiliation']">
              link to see all content affiliated with them.
            </xsl:when>
            <xsl:otherwise>
              link to see all content selected in this lens.
            </xsl:otherwise>
          </xsl:choose>
        </p>

        <xsl:if test="entry/tag_namespaces or entry/tags">
          <p class="lensinfohelp lensinfotags">
            Click the
            <strong>
              <img src="/tags-closed.png" class="tagicon" alt="tag icon" />
              tag icon
            </strong>
            to display tags associated with this content.
          </p>
        </xsl:if>
      </div>

    </li>
  </xsl:template>

  <xsl:template name="lenshelp">
    <div class="lensinfo hiddenStructure">
      <h4 class="hiddenStructure">
        <!-- Definition of a lens -->
        <xsl:text>Definition of a lens</xsl:text>
      </h4>
      <img src="/lenses-large.png" class="lensinfologo">
        <xsl:attribute name="alt">
          <!-- Diagram of lenses -->
          <xsl:text>Diagram of lenses</xsl:text>
        </xsl:attribute>
      </img>
      <!-- Lenses -->
      <h5>
        <xsl:text>Lenses</xsl:text>
      </h5>
      <!-- A lens is a custom view of the content in the repository.  You can think 
           of it as a fancy kind of list that will let you see 
           content through the eyes of organizations and people you 
           trust. -->
      <p>
        <xsl:text>A lens is a custom view of the content in the repository. You can think of it as a fancy kind of list that will let you see content through the eyes of organizations and people you trust.</xsl:text>
      </p>
      <!-- What is in a lens? -->
      <h5>
        <xsl:text>What is in a lens?</xsl:text>
      </h5>
      <!-- Lens makers point to materials (modules and 
           collections), creating a guide that includes their own 
           comments and descriptive tags about the content. -->
      <p>
        <xsl:text>Lens makers point to materials (modules and collections), creating a guide that includes their own comments and descriptive tags about the content.</xsl:text>
      </p>
      <!-- Who can create a lens? -->
      <h5>
        <xsl:text>Who can create a lens?</xsl:text>
      </h5>
      <!-- Any individual member, a community, or a respected 
           organization. -->
      <p>
        <xsl:text>Any individual member, a community, or a respected organization.</xsl:text>
      </p>
      <h5>
        What are tags?
        <img src="/tags.png" class="tagicon" alt="tag icon"/>
      </h5>
      <p>
        <xsl:text>Tags are descriptors added by lens makers to help label content, attaching a vocabulary that is meaningful in the context of the lens.</xsl:text>
      </p>
    </div>
  </xsl:template>


  <xsl:template name="emailtheauthor">
    <xsl:param name="atbottom">0</xsl:param>
    <xsl:param name="whichauthors">modulenocontext</xsl:param>
    <a class="cnx_email_author">
      <xsl:attribute name="href">
        <xsl:text>mailto:</xsl:text>
        <xsl:choose>
          <xsl:when test="$whichauthors='collection'">
            <!-- href="mailto:jdoe@example.com?cc=cnx@cnx.org&amp;subject=Feedback on Connexions collection: All about 
                       steak&amp;body=Feedback on Connexions collection: All about steak (http://cnx.org/content/colSteak/1.1), 
                       module: Grilling steaks (http://cnx.org/content/mSteak/1.1)" -->
            <xsl:value-of select="$collauthoremailstring"/>
            <xsl:text>?cc=</xsl:text>
            <xsl:value-of select="publishing/portal/email"/>
            <xsl:text>&amp;subject=</xsl:text>
            <xsl:call-template name="feedbackonportalcollection"/>
            <xsl:text>&amp;body=</xsl:text>
            <xsl:call-template name="feedbackonportalcollection"/>
            <xsl:text> (</xsl:text>
            <xsl:value-of select="$collurl"/>
            <xsl:text>)</xsl:text>
            <xsl:text>, module:</xsl:text>
            <xsl:text> </xsl:text>
            <xsl:value-of select="$moduletitleescapedformailto"/>
            <xsl:text> (</xsl:text>
            <xsl:value-of select="$baseurl"/>
            <xsl:text>)</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <!-- href="mailto:jdoe@example.com?cc=cnx@cnx.org&amp;subject=Feedback on Connexions module: Grilling 
                       steak&amp;body=Feedback on Connexions module: Grilling steak (http://cnx.org/content/mSteak/1.1)[ as used in 
                       collection: All about steaks (http://cnx.org/content/colSteak/1.1)]" -->
            <xsl:value-of select="$authoremailstring"/>
            <xsl:text>?cc=</xsl:text>
            <xsl:value-of select="publishing/portal/email"/>
            <xsl:text>&amp;subject=</xsl:text>
            <xsl:call-template name="feedbackonportalmodule"/>
            <xsl:text>&amp;body=</xsl:text>
            <xsl:call-template name="feedbackonportalmodule"/>
            <xsl:text> (</xsl:text>
            <xsl:value-of select="$baseurl"/>
            <xsl:text>)</xsl:text>
            <xsl:if test="$whichauthors='moduleandcoll' or $whichauthors='moduleincontext'">
              <xsl:text> </xsl:text>
              <xsl:text>as used in collection:</xsl:text>
              <xsl:text> </xsl:text>
              <xsl:value-of select="$colltitleescapedformailto"/>
              <xsl:text> (</xsl:text>
              <xsl:value-of select="$collurl"/>
              <xsl:text>)</xsl:text>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:if test="$atbottom='0'">
        <xsl:attribute name="title">
          <xsl:text>E-mail the</xsl:text>
          <xsl:if test="$whichauthors!='collection' and count(metadata/author) &gt; 1 or $whichauthors='collection' and count(display/context/authors/author) &gt; 1">
            <xsl:text> authors</xsl:text>
          </xsl:if>
          <xsl:if test="$whichauthors!='collection' and count(metadata/author) = 1 or $whichauthors='collection' and count(display/context/authors/author) = 1">
            <xsl:text> author</xsl:text>
          </xsl:if>
          <xsl:text> of the</xsl:text>
          <xsl:if test="$whichauthors='modulenocontext' or $whichauthors='moduleincontext'">
            <xsl:text> module</xsl:text>
          </xsl:if>
          <xsl:if test="$whichauthors='collection'">
            <xsl:text> collection</xsl:text>
          </xsl:if>
        </xsl:attribute>
      </xsl:if>

      <xsl:text>E-mail the</xsl:text>
      <xsl:if test="$atbottom='1'">
        <xsl:if test="$whichauthors='modulenocontext' or $whichauthors='moduleincontext'">
          <xsl:text> module</xsl:text>
        </xsl:if>
        <xsl:if test="$whichauthors='collection'">
          <xsl:text> collection</xsl:text>
        </xsl:if>
      </xsl:if>
      <xsl:if test="$whichauthors!='collection' and count(metadata/author) &gt; 1 or $whichauthors='collection' and count(display/context/authors/author) &gt; 1">
        <xsl:text> authors</xsl:text>
      </xsl:if>
      <xsl:if test="$whichauthors!='collection' and count(metadata/author) = 1 or $whichauthors='collection' and count(display/context/authors/author) = 1">
        <xsl:text> author</xsl:text>
      </xsl:if>
    </a>
  </xsl:template>

  <xsl:template name="feedbackonportalmodule">
    <!-- Feedback on -->
    <xsl:text>Feedback on</xsl:text>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$portal"/>
    <xsl:text> </xsl:text>
    <!-- module: -->
    <xsl:text>module:</xsl:text>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$moduletitleescapedformailto"/>
  </xsl:template>

  <xsl:template name="feedbackonportalcollection">
    <!-- Feedback on -->
    <xsl:text>Feedback on</xsl:text>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$portal"/>
    <xsl:text> </xsl:text>
    <!-- collection: -->
    <xsl:text>collection:</xsl:text>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$colltitleescapedformailto"/>
  </xsl:template>

  <xsl:template name="escapequotesforjs">
    <xsl:param name="string" select="$moduletitle"/>
    <xsl:variable name="singlequotepass">
      <xsl:call-template name="searchandreplace">
        <xsl:with-param name="string" select="$string"/>
        <xsl:with-param name="search">'</xsl:with-param>
        <xsl:with-param name="replace">\'</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:call-template name="searchandreplace">
      <xsl:with-param name="string" select="$singlequotepass"/>
      <xsl:with-param name="search">"</xsl:with-param>
      <xsl:with-param name="replace">\"</xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="escapeformailto">
    <xsl:param name="string" select="$moduletitle"/>
    <xsl:variable name="questionmarkpass">
      <xsl:call-template name="searchandreplace">
        <xsl:with-param name="string" select="$string"/>
        <xsl:with-param name="search">?</xsl:with-param>
        <xsl:with-param name="replace">%3F</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="ampersandpass">
      <xsl:call-template name="searchandreplace">
        <xsl:with-param name="string" select="$questionmarkpass"/>
        <xsl:with-param name="search">&amp;</xsl:with-param>
        <xsl:with-param name="replace">%26</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:call-template name="searchandreplace">
      <xsl:with-param name="string" select="$ampersandpass"/>
      <xsl:with-param name="search">"</xsl:with-param>
      <xsl:with-param name="replace">%22</xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="searchandreplace">
    <xsl:param name="string" select="$moduletitle"/>
    <xsl:param name="search">'</xsl:param>
    <xsl:param name="replace">\'</xsl:param>
    <xsl:choose>
      <xsl:when test="contains($string,$search)">
        <xsl:value-of select="substring-before($string,$search)"/>
        <xsl:value-of select="$replace"/>
        <xsl:call-template name="searchandreplace">
          <xsl:with-param name="string" select="substring-after($string,$search)"/>
          <xsl:with-param name="search" select="$search"/>
          <xsl:with-param name="replace" select="$replace"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$string"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>
